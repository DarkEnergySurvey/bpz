#!/usr/bin/env python


import bpz.bpz_utils as bpz_utils
import bpz.transfer_utils as transfer_utils
import despyastro
import time
import numpy
import fitsio

QUERY_MOF = """
SELECT
   coadd_object_id,
   cm_flux_g, 
   cm_flux_g/cm_flux_s2n_g as cm_fluxerr_g,
   cm_flux_r,
   cm_flux_r/cm_flux_s2n_r as cm_fluxerr_r,
   cm_flux_i,
   cm_flux_i/cm_flux_s2n_i as cm_fluxerr_i,
   cm_flux_z,
   cm_flux_z/cm_flux_s2n_z as cm_fluxerr_z
 FROM nsevilla.y3a2_mof_tmp
 WHERE tilename='{tilename}'
 ORDER BY coadd_object_id
"""

QUERY_SEX = """
select
  COADD_OBJECT_ID,
  EBV_SFD98,

  FLUX_AUTO_G,
  FLUX_AUTO_R,
  FLUX_AUTO_I,
  FLUX_AUTO_Z,
  FLUX_AUTO_Y,
  FLUXERR_AUTO_G,
  FLUXERR_AUTO_R,
  FLUXERR_AUTO_I,
  FLUXERR_AUTO_Z,
  FLUXERR_AUTO_Y,

  MAG_AUTO_G,
  MAG_AUTO_R,
  MAG_AUTO_I,
  MAG_AUTO_Z,
  MAG_AUTO_Y,
  MAGERR_AUTO_G,
  MAGERR_AUTO_R,
  MAGERR_AUTO_I,
  MAGERR_AUTO_Z,
  MAGERR_AUTO_Y


  FROM Y3A2_COADD_OBJECT_SUMMARY where TILENAME='{tilename}'
  ORDER BY coadd_object_id

"""

tilename = 'DES2246-4457'
#tilename = 'DES2246-4123'
out_filters = ('g','r','i','z','Y')
sex_filters = ('g','r','i','z','Y')
mof_filters = ('g','r','i','z')
MOF_FILTERS = [f.upper() for f in mof_filters]

t0 = time.time()
    
dbh = transfer_utils.get_dbh(db_section='db-dessci',verb=True)
sql_mof = QUERY_MOF.format(tilename=tilename)#, **kwargs)
print sql_mof

mofcat = despyastro.query2rec(sql_mof, dbhandle=dbh)
print mofcat.dtype.names
print bpz_utils.elapsed_time(t0)
t1 = time.time()
sql_sex = QUERY_SEX.format(tilename=tilename)#, **kwargs)
print sql_sex

sexcat = despyastro.query2rec(sql_sex, dbhandle=dbh)
print sexcat.dtype.names
print bpz_utils.elapsed_time(t1)
print bpz_utils.elapsed_time(t0)

print mofcat['COADD_OBJECT_ID']
print sexcat['COADD_OBJECT_ID']

# Find the -9999 objects in MOF catalog, we can do it in any band
FILTER = MOF_FILTERS[0]
no_mof_idx = numpy.where(mofcat['CM_FLUX_%s' % FILTER] == -9999)

# Here we pre-make the output record array.
# It should contain all the output colums we want

# Define dtypes and record array for ID, RA and DEC
dtypes = [('COADD_OBJECT_ID','i8'),
          ('EBV_SFD98','f4')]
for BAND in out_filters:
    dtypes.append( (("FLUX_MOFMIX_%s" % BAND),'f4'))
    dtypes.append( (("FLUXERR_MOFMIX_%s" % BAND),'f4'))
nrows = len(mofcat['COADD_OBJECT_ID'])
data_out = numpy.zeros(nrows, dtype=dtypes)

# Case 1, we want a mix of Sextractor+mof
for filter in out_filters:
    FILTER = filter.upper()
    if filter in mof_filters:
        data_out["FLUX_MOFMIX_%s" % filter]    = mofcat['CM_FLUX_%s' % FILTER]
        data_out["FLUXERR_MOFMIX_%s" % filter] = mofcat['CM_FLUXERR_%s' % FILTER]
        # Replace the -9999 with SExtractor values
        data_out["FLUX_MOFMIX_%s" % filter][no_mof_idx]    = sexcat['FLUX_AUTO_%s' % FILTER][no_mof_idx]
        data_out["FLUXERR_MOFMIX_%s" % filter][no_mof_idx] = sexcat['FLUXERR_AUTO_%s' % FILTER][no_mof_idx]
    elif filter in sex_filters:
        data_out["FLUX_MOFMIX_%s" % filter]    = sexcat['FLUX_AUTO_%s' % FILTER]
        data_out["FLUXERR_MOFMIX_%s" % filter] = sexcat['FLUXERR_AUTO_%s' % FILTER]
    else:
        exit("ERROR: filters %s not in input filters" % filter)

# Now we write the file
fitsio.write('mofmix.fits', data_out, extname='OBJECTS', clobber=True)
        
        

    
    
